type UserProxy @entity {
  id: ID!
  proxyAddress: Bytes!
  userAddress: Bytes!
}

enum PositionTransactionType {
  MINT
  TRANSFER
  CONFISCATE
}

type PositionTransaction @entity {
  id: ID!
  type: String!
  collateral: BigInt!
  deltaCollateral: BigInt!
  normalDebt: BigInt!
  deltaNormalDebt: BigInt!
  position: Position!
}

type Position @entity {
  id: ID!
  vault: Vault!
  tokenId: BigInt!
  user: Bytes!
  collateral: BigInt!
  maxCollateral: BigInt
  normalDebt: BigInt!
  maxNormalDebt: BigInt
  positionTransactions: [PositionTransaction!] @derivedFrom(field: "position")
}

enum VaultType {
  Element,
  BarnBridge,
  Notional
}

type Vault @entity {
  id: ID!
  address: Bytes
  name: VaultType
  positions: [Position!] @derivedFrom(field: "vault")
  collaterals: [Collateral!] @derivedFrom(field: "vault")
}

type Collateral @entity {
  id: ID!
  address: Bytes
  name: String
  originator: String
  type: String
  maturity: BigInt
  underlierName: String
  underlierAddress: Bytes
  vault: Vault
}
