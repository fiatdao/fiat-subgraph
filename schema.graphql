type UserProxy @entity {
  id: ID!
  proxyAddress: Bytes!
  userAddress: Bytes!
}

interface PositionTransactionAction {
  id: ID!
  collateral: BigInt!
  deltaCollateral: BigInt!
  normalDebt: BigInt!
  deltaNormalDebt: BigInt!
  transactionHash: Bytes!
  position: Position!
  vault: Bytes!
  vaultName: String
  tokenId: BigInt!
  user: Bytes!
}

type ModifyCollateralAndDebtAction implements PositionTransactionAction @entity {
  id: ID!
  collateral: BigInt!
  normalDebt: BigInt!
  transactionHash: Bytes!
  position: Position!
  vaultName: String
  # Event Properties
  vault: Bytes!
  tokenId: BigInt!
  user: Bytes!
  collateralizer: Bytes!
  creditor: Bytes!
  deltaCollateral: BigInt!
  deltaNormalDebt: BigInt!
}

type TransferCollateralAndDebtAction implements PositionTransactionAction @entity {
  id: ID!
  collateral: BigInt!
  normalDebt: BigInt!
  transactionHash: Bytes!
  position: Position!
  user: Bytes!
  vaultName: String
  # Event Properties
  vault: Bytes!
  tokenId: BigInt!
  userSrc: Bytes!
  userDst: Bytes!
  deltaCollateral: BigInt!
  deltaNormalDebt: BigInt!
}

type ConfiscateCollateralAndDebtAction implements PositionTransactionAction @entity {
  id: ID!
  collateral: BigInt!
  normalDebt: BigInt!
  transactionHash: Bytes!
  position: Position!
  vaultName: String
  # Event Properties
  vault: Bytes!
  tokenId: BigInt!
  user: Bytes!
  collateralizer: Bytes!
  debtor: Bytes!
  deltaCollateral: BigInt!
  deltaNormalDebt: BigInt!
}

type Position @entity {
  id: ID!
  vault: Vault
  vaultName: String
  collateral: Collateral
  userPosition: UserPosition!
  userAddress: Bytes!
  totalCollateral: BigInt!
  totalNormalDebt: BigInt!
  maturity: BigInt
  positionTransactions: [PositionTransactionAction!] @derivedFrom(field: "position")
}

enum VaultType {
  ELEMENT,
  BARNBRIDGE,
  NOTIONAL
}

type Vault @entity {
  id: ID!
  address: Bytes
  name: String
  type: VaultType
  collateralizationRatio: BigInt
  interestPerSecond: BigInt

  # Auction related data
  # Multiplicative factor to increase start price [wad]
  multiplier: BigInt
  # Time elapsed before auction reset [seconds]
  maxAuctionDuration: BigInt
  # Percentage drop before auction reset [percentage in wad]
  maxDiscount: BigInt
  # Cache (v.debtFloor * v.liquidationPenalty) to prevent excessive SLOADs [wad]
  auctionDebtFloor: BigInt

  positions: [Position!] @derivedFrom(field: "vault")
  collaterals: [Collateral!] @derivedFrom(field: "vault")
}

type Collateral @entity {
  id: ID!
  tokenId: BigInt
  address: Bytes
  symbol: String
  maturity: BigInt
  underlierSymbol: String
  underlierAddress: Bytes
  vault: Vault
  vaultName: String
  faceValue: BigInt
  depositedCollateral: BigInt
}

type UserPosition @entity {
  id: ID!
  userAddress: Bytes
  totalCollateral: BigInt
  totalFIAT: BigInt
  positions: [Position!] @derivedFrom(field: "userPosition")
}

type FiatData @entity {
  id: ID!
  address: Bytes
  minted: BigInt
  burned: BigInt
  totalSupply: BigInt
}

type UserAuction @entity {
  id: ID!
  # Contract Generated Id
  auctionId: BigInt
  # Debt to sell == Credit to raise [wad]
  debt: BigInt
  # collateral to sell [wad]
  collateralToSell: BigInt
  # Vault of the liquidated Positions collateral
  vault: Vault
  vaultName: String
  # TokenId of the liquidated Positions collateral
  tokenId: BigInt
  collateral: Collateral
  # Owner of the liquidated Position
  user: Bytes
  # Auction start time
  startsAt: BigInt
  # Starting price [wad]
  startPrice: BigInt
  # Keeper
  keeper: Bytes
  # Tip
  tip: BigInt
  isActive: Boolean
}
