type UserProxy @entity {
  id: ID!
  proxyAddress: Bytes!
  owner: Bytes!
}

interface PositionTransactionAction {
  id: ID!
  transactionHash: Bytes!
  vault: Vault
  vaultName: String # same as vault.name (workaround)
  tokenId: BigInt! # replace with collateralType
  position: Position!
  user: User!
  collateral: BigInt!
  normalDebt: BigInt!
  deltaCollateral: BigInt!
  deltaNormalDebt: BigInt!
  timestamp: BigInt!
}

type ModifyCollateralAndDebtAction implements PositionTransactionAction @entity {
  id: ID!
  transactionHash: Bytes!
  vault: Vault
  vaultName: String # same as vault.name (workaround)
  tokenId: BigInt! # replace with collateralType
  position: Position!
  user: User!
  collateral: BigInt!
  normalDebt: BigInt!
  collateralizer: Bytes!
  creditor: Bytes!
  deltaCollateral: BigInt!
  deltaNormalDebt: BigInt!
  timestamp: BigInt!
}

type TransferCollateralAndDebtAction implements PositionTransactionAction @entity {
  id: ID!
  transactionHash: Bytes!
  vault: Vault
  vaultName: String # same as vault.name (workaround)
  tokenId: BigInt! # replace with collateralType
  position: Position!
  user: User!
  userSrc: User!
  userDst: User!
  collateral: BigInt!
  normalDebt: BigInt!
  deltaCollateral: BigInt!
  deltaNormalDebt: BigInt!
  timestamp: BigInt!
}

type ConfiscateCollateralAndDebtAction implements PositionTransactionAction @entity {
  id: ID!
  transactionHash: Bytes!
  vault: Vault
  vaultName: String # same as vault.name (workaround)
  tokenId: BigInt! # replace with collateralType
  position: Position!
  user: User!
  collateralizer: User!
  debtor: User!
  collateral: BigInt!
  normalDebt: BigInt!
  deltaCollateral: BigInt!
  deltaNormalDebt: BigInt!
  timestamp: BigInt!
}

type Position @entity {
  id: ID!
  vault: Vault
  vaultName: String # same as vault.name (workaround)
  collateralType: CollateralType
  owner: Bytes!
  user: User!
  collateral: BigInt!
  normalDebt: BigInt!
  maturity: BigInt
  positionTransactions: [PositionTransactionAction!] @derivedFrom(field: "position")
}

type Codex @entity {
  id: ID!
  globalDebtCeiling: BigInt!
}

type Balance @entity {
  id: ID!
  vault: Bytes
  tokenId: BigInt
  owner: User
  balance: BigInt
}

type Delegate @entity {
  id: ID!
  delegator: User!
  delegatee: User!
  hasDelegate: BigInt
}

enum VaultType {
  ELEMENT,
  NOTIONAL,
  YIELD
}

type Vault @entity {
  id: ID!
  address: Bytes
  name: String
  type: VaultType
  vaultType: Bytes

  # Collybus related config
  collateralizationRatio: BigInt
  interestPerSecond: BigInt
  defaultRateId: BigInt
  debtFloor: BigInt
  debtCeiling: BigInt

  # CollateralAuction related config
  multiplier: BigInt
  maxAuctionDuration: BigInt
  maxDiscount: BigInt
  auctionDebtFloor: BigInt

  positions: [Position!] @derivedFrom(field: "vault")
  collateralTypes: [CollateralType!] @derivedFrom(field: "vault")
}

type CollateralType @entity {
  id: ID!
  tokenId: BigInt
  
  address: Bytes # rename to tokenAddress
  symbol: String # rename to tokenSymbol
  scale: BigInt # rename to tokenScale
  
  underlierSymbol: String
  underlierAddress: Bytes
  underlierScale: BigInt

  vault: Vault
  vaultName: String # same as vault.name (workaround)
  
  maturity: BigInt
  faceValue: BigInt
  depositedCollateral: BigInt

  discountRate: CollybusDiscountRate

  # Only set for Element Finance pTokens
  eptData: EPTData
  # Only set for Notional Finance fCash Tokens
  fcData: FCData
  # Only set for Yield Protocol fyTokenz
  fyData: FYData
}

type EPTData @entity {
  id: ID!
  balancerVault: Bytes
  convergentCurvePool: Bytes
  poolId: Bytes
  vault: [CollateralType!] @derivedFrom(field: "eptData")
}

type FCData @entity {
  id: ID!
  notional: Bytes
  tenor: BigInt
  vault: [CollateralType!] @derivedFrom(field: "fcData")
}

type FYData @entity {
  id: ID!
  yieldSpacePool: Bytes
  vault: [CollateralType!] @derivedFrom(field: "fyData")
}

type User @entity {
  id: ID!
  address: Bytes
  credit: BigInt
  balances: [Balance!] @derivedFrom(field: "owner")
  positions: [Position!] @derivedFrom(field: "user")
  collateralAuctions: [CollateralAuction!] @derivedFrom(field: "user")
  delegated: [Delegate!] @derivedFrom(field: "delegator")
  delegates: [Delegate!] @derivedFrom(field: "delegatee")
}

type FIAT @entity {
  id: ID!
  address: Bytes
  minted: BigInt
  burned: BigInt
  totalSupply: BigInt
}

type FIATTokenAllowance @entity {
  id: ID!
  owner: Bytes
  spender: Bytes
  amount: BigInt
}

type FIATTokenBalance @entity {
  id: ID!
  address: Bytes
  balance: BigInt
}

type CollateralAuction @entity {
  id: ID!
  auctionId: BigInt
  vault: Vault
  vaultName: String # same as vault.name (workaround)
  tokenId: BigInt # remove in favour of collateralType
  collateralType: CollateralType
  user: User
  debt: BigInt
  collateralToSell: BigInt
  startsAt: BigInt
  startPrice: BigInt
  isActive: Boolean
}

type CollybusSpot @entity {
  id: ID!
  token: Bytes
  spot: BigInt
}

type CollybusDiscountRate @entity {
  id: ID!
  rateId: BigInt
  discountRate: BigInt
  collateralTypes: [CollateralType!] @derivedFrom(field: "discountRate")
}
